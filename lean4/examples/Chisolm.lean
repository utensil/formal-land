import Mathlib.LinearAlgebra.CliffordAlgebra.Basic
import Mathlib.LinearAlgebra.CliffordAlgebra.Grading
-- import Mathlib.Data.Matrix.Notation

variable {R : Type _}

variable {R M : Type*} [CommRing R] [AddCommGroup M] [Module R M]

variable {Q : QuadraticForm R M}

variable [Invertible (2 : R)]

variable (u v w : CliffordAlgebra Q)

local notation "ùí¢" => algebraMap R (CliffordAlgebra Q)

local notation "ùüô" => ùí¢ 1
local notation "ùüö" => ùí¢ 2
local notation "‚Öüùüö" => ùí¢ ‚Öü2

lemma mul_eq_half_add_half_sub : u * v = ‚Öüùüö * (u * v + v * u) + ‚Öüùüö * (u * v - v * u) := by
  calc
    u * v = ùüô * (u * v)                                             := by rw [map_one, one_mul]
        _ = ùí¢ (‚Öü2 * 2) * (u * v)                                    := by rw [invOf_mul_self']
        _ = ‚Öüùüö * ùüö * (u * v)                                        := by rw [map_mul]
        _ = ‚Öüùüö * 2 * (u * v)                                        := by rw [map_ofNat]
        _ = ‚Öüùüö * (2 * (u * v))                                      := by rw [mul_assoc]
        _ = ‚Öüùüö * (u * v + u * v)                                    := by rw [‚Üêtwo_mul]
        _ = ‚Öüùüö * ((u * v + v * u) + (u * v - v * u))                := by rw [add_add_sub_cancel]
        _ = ‚Öüùüö * (u * v + v * u) + ‚Öüùüö * (u * v - v * u)             := by rw [mul_add]
  done

#check mul_eq_half_add_half_sub

-- local macro_rules
-- | `($x ^ $y) => `(HPow.hPow $x $y)

-- #check ùí¢^n

-- syntax (name := cliffordNotation) "ùí¢[" term "]" : term

#check CliffordAlgebra.gradedAlgebra

-- local notation "ùí¢" => CliffordAlgebra

-- local macro_rules
-- | `($x ^ $y) => `(HPow.hPow $x $y)

-- -- #check ùí¢^n

-- -- syntax (name := cliffordNotation) "ùí¢[" term "]" : term

-- namespace GradedAlgebra

-- local notation g "‚ü¶" r "‚üß'" => GradedAlgebra.proj g r

-- -- #check GradedAlgebra.proj G.Œπ G 0

-- -- #check G‚ü¶0‚üß

-- end GradedAlgebra



