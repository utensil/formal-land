/-
Copyright (c) 2022 Jiale Miao. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiale Miao, Utensil Song, Eric Wieser
-/
-- This file is mathported from https://github.com/leanprover-community/mathlib/pull/16040/
import Mathlib.GroupTheory.GroupAction.ConjAct
import Mathlib.Algebra.Star.Unitary
import Mathlib.LinearAlgebra.CliffordAlgebra.Star
import Mathlib.LinearAlgebra.CliffordAlgebra.Even
import Mathlib.LinearAlgebra.CliffordAlgebra.Contraction

/-!
# The Pin group and the Spin group

In this file we define `lipschitz`, `pinGroup` and `spinGroup` and show they form a group.

## Main definitions

* `lipschitz`: the Lipschitz group with a quadratic form.
* `pinGroup`: the Pin group defined as the infimum of `lipschitz` and `unitary`.
* `spinGroup`: the Spin group defined as the infimum of `pinGroup` and `clifford.even`.

## Implementation Notes

Here are some discussion about the latent ambiguity of definition :
https://mathoverflow.net/q/427881/172242 and https://mathoverflow.net/q/251288/172242

The definition of the Lipschitz group `{ùë• ‚àà ùê∂ùëô(ùëâ,ùëû) ‚îÇ ùë• ùëñùë† ùëñùëõùë£ùëíùëüùë°ùëñùëèùëôùëí ùëéùëõùëë ùë•ùë£ùë•‚Åª¬π‚àà ùëâ}` is given by:
‚Ä¢ Fulton, W. and Harris, J., 2004. Representation theory. New York: Springer, p.chapter 20.
‚Ä¢ https://en.wikipedia.org/wiki/Clifford_algebra#Lipschitz_group
But they presumably form a group only in finite dimensions. So we define `lipschitz` with closure of
all the elements in the form of `Œπ Q m`, and we show this definition is at least as large as the
other definition (See `mem_lipschitz_conj_act_le` and `mem_lipschitz_involute_le`). The reverse
statement presumably being true only in finite dimensions.

## TODO

Try to show the reverse statement is true in finite dimensions.
-/

variable {R : Type*} [CommRing R] [Nontrivial R]

variable {M : Type*} [AddCommGroup M] [Module R M]

variable {Q : QuadraticForm R M}

section Pin

open CliffordAlgebra MulAction

open scoped Pointwise

def inv_of_inv_sq (m : M) [Invertible (Œπ Q m)] [Invertible (2 : R)] : Invertible ((Œπ Q m) * (Œπ Q m)) :=
  Invertible.mul ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫

def inv_algebraMap_of_inv_Œπ (m : M) [Invertible (Œπ Q m)] [Invertible (2 : R)] : Invertible (algebraMap _ _ (Q m) : CliffordAlgebra Q) :=
  Invertible.copy (inv_of_inv_sq m) _ (Œπ_sq_scalar _ _).symm

def inv_of_inv_Œπ (m : M) [Invertible (Œπ Q m)] [Invertible (2 : R)] : Invertible (Q m) :=
  letI : Invertible (algebraMap _ (CliffordAlgebra Q) (Q m)) :=
    (Invertible.mul ‚ÄπInvertible (Œπ Q m)‚Ä∫ ‚ÄπInvertible (Œπ Q m)‚Ä∫).copy  _ (Œπ_sq_scalar _ _).symm
  letI bar : Invertible (algebraMap _ (ExteriorAlgebra R M) (Q m)) := {
    invOf := equivExterior Q ‚Öü(algebraMap _ (CliffordAlgebra Q) (Q m))
    invOf_mul_self := by
      dsimp
      rw [‚ÜêAlgebra.commutes, ‚ÜêAlgebra.smul_def, ‚Üêmap_smul, Algebra.smul_def, mul_invOf_self, changeForm_one]
    mul_invOf_self := by
      dsimp
      rw [‚ÜêAlgebra.smul_def, ‚Üêmap_smul, Algebra.smul_def, mul_invOf_self, changeForm_one]
  }
  (bar.map ExteriorAlgebra.algebraMapInv).copy _ (by simp)

#align invertible_of_invertible_Œπ inv_of_inv_Œπ

-- restore the lean3 behavior
macro_rules | `($x * $y) => `(@HMul.hMul _ _ _ instHMul $x $y)

/-- `lipschitz` is the subgroup closure of all the elements in the form of `Œπ Q m` where `Œπ`
is the canonical linear map `M ‚Üí‚Çó[R] CliffordAlgebra Q`. -/
def lipschitz (Q : QuadraticForm R M) :=
  Subgroup.closure (Units.val ‚Åª¬π' Set.range (Œπ Q) : Set (CliffordAlgebra Q)À£)
#align lipschitz lipschitz

set_option synthInstance.maxHeartbeats 25000 in
/-- If x is in `lipschitz Q`, then `(Œπ Q).range` is closed under twisted conjugation. The reverse
statement presumably being true only in finite dimensions.-/
theorem mem_lipschitz_conjAct_le {x : (CliffordAlgebra Q)À£} [Invertible (2 : R)]
    (hx : x ‚àà lipschitz Q) : ConjAct.toConjAct x ‚Ä¢ LinearMap.range (Œπ Q) ‚â§ LinearMap.range (Œπ Q) := by
  unfold lipschitz at hx
  apply Subgroup.closure_induction'' hx
  ¬∑ rintro x ‚ü®a, ha‚ü© y ‚ü®z, ‚ü®‚ü®b, hb‚ü©, hz‚ü©‚ü©
    have := x.invertible
    have : Invertible (Œπ Q a) := by rwa [ha]
    have : Invertible (Q a) := inv_of_inv_Œπ a
    rw [LinearMap.mem_range]
    simp only [HSMul.hSMul, SMul.smul, DistribMulAction.toLinearMap_apply, ConjAct.ofConjAct_toConjAct,
                SetLike.mem_coe, LinearMap.mem_range] at hz -- diff
    subst hb
    suffices ‚àÉ y : M, Œπ Q y = Œπ Q a * Œπ Q b * ‚Öü (Œπ Q a) by simp_all only [invOf_units]
    rw [Œπ_mul_Œπ_mul_invOf_Œπ Q a b]
    use ((‚Öü (Q a) * QuadraticForm.polar Q a b) ‚Ä¢ a - b)
  ¬∑ rintro x ‚ü®a, ha‚ü© y ‚ü®z, ‚ü®‚ü®b, hb‚ü©, hz‚ü©‚ü©
    have := x.invertible
    have : Invertible (Œπ Q a) := by rwa [ha]
    have : Invertible (Q a) := inv_of_inv_Œπ a
    rw [LinearMap.mem_range]
    simp [HSMul.hSMul, SMul.smul, DistribMulAction.toLinearMap_apply, ConjAct.ofConjAct_toConjAct,
                ConjAct.toConjAct_inv, inv_inv] at hz -- diff
    subst hb
    suffices ‚àÉ y : M, Œπ Q y = ‚Öü (Œπ Q a) * Œπ Q b * Œπ Q a by simp_all only [invOf_units]
    rw [invOf_Œπ_mul_Œπ_mul_Œπ Q a b]
    use ((‚Öü (Q a) * QuadraticForm.polar Q a b) ‚Ä¢ a - b)
  ¬∑ simp only [ConjAct.toConjAct_one, (one_smul _ (LinearMap.range (Œπ Q))), le_refl]
  ¬∑ intro x y hx1 hy1 z hz
    simp only [ConjAct.toConjAct_mul] at hz
    suffices (ConjAct.toConjAct x * ConjAct.toConjAct y) ‚Ä¢ LinearMap.range (Œπ Q) ‚â§ LinearMap.range (Œπ Q) by
      exact this hz
    rintro m ‚ü®a, ‚ü®b, hb‚ü©, ha‚ü©
    simp only [HSMul.hSMul, SMul.smul, DistribMulAction.toLinearMap_apply, Units.val_mul, mul_inv_rev] at ha
    subst hb
    have hb : ‚Üëx * (‚Üëy * (Œπ Q b) * ‚Üëy‚Åª¬π) * ‚Üëx‚Åª¬π = m := by
      simp [‚Üê ha, ConjAct.toConjAct_mul, ConjAct.units_smul_def, mul_assoc]
    have hy2 : ‚Üëy * (Œπ Q) b * ‚Üëy‚Åª¬π ‚àà ConjAct.toConjAct y ‚Ä¢ LinearMap.range (Œπ Q) := by
      simp only [HSMul.hSMul, SMul.smul, exists_exists_eq_and, exists_apply_eq_apply, Submodule.mem_map,
        LinearMap.mem_range, DistribMulAction.toLinearMap_apply, ConjAct.ofConjAct_toConjAct]
    specialize hy1 hy2
    have hx2 : ‚Üëx * (‚Üëy * (Œπ Q) b * ‚Üëy‚Åª¬π) * ‚Üëx‚Åª¬π ‚àà ConjAct.toConjAct x ‚Ä¢ LinearMap.range (Œπ Q) := by
      simp only [HSMul.hSMul, SMul.smul, Units.mul_left_inj, Units.mul_right_inj, exists_exists_eq_and,
        Submodule.mem_map, LinearMap.mem_range, DistribMulAction.toLinearMap_apply,
        ConjAct.ofConjAct_toConjAct]
      exact hy1
    specialize hx1 hx2
    rwa [hb] at hx1
#align mem_lipschitz_conj_act_le mem_lipschitz_conjAct_le

#print mem_lipschitz_conjAct_le

/-- This is another version of `mem_lipschitz_conj_act_le` which uses `involute`.-/
theorem mem_lipschitz_involute_le {x : (CliffordAlgebra Q)À£} [Invertible (2 : R)]
    (hx : x ‚àà lipschitz Q) (b : M) : involute ‚Üëx * Œπ Q b * ‚Üëx‚Åª¬π ‚àà LinearMap.range (Œπ Q) :=
  by
  revert b
  unfold lipschitz at hx
  apply Subgroup.closure_induction'' hx
  ¬∑ rintro x ‚ü®a, ha‚ü© b
    have := x.invertible
    have : Invertible (Œπ Q a) := by rwa [ha]
    have : Invertible (Q a) := inv_of_inv_Œπ a
    rw [LinearMap.mem_range, ‚Üê invOf_units x]
    simp_rw [‚Üê ha, involute_Œπ]
    refine'
      ‚ü®-((‚Öü (Q a) * QuadraticForm.polar Q a b) ‚Ä¢ a - b), by
        simp only [map_neg, neg_mul, Œπ_mul_Œπ_mul_invOf_Œπ Q a b]‚ü©
    done
  ¬∑ rintro x ‚ü®a, ha‚ü© b
    have := x.invertible
    have : Invertible (Œπ Q a) := by rwa [ha]
    have : Invertible (Q a) := inv_of_inv_Œπ a
    have := invertibleNeg (Œπ Q a)
    have := Invertible.map (involute : CliffordAlgebra Q ‚Üí‚Çê[R] CliffordAlgebra Q) (Œπ Q a)
    rw [LinearMap.mem_range, ‚Üê invOf_units x, inv_inv]
    simp_rw [‚Üê ha, map_invOf, involute_Œπ, invOf_neg]
    refine'
      ‚ü®-((‚Öü (Q a) * QuadraticForm.polar Q a b) ‚Ä¢ a - b), by
        simp only [map_neg, neg_mul, invOf_Œπ_mul_Œπ_mul_Œπ Q a b]‚ü©
    done
  ¬∑ simp only [Units.val_one, map_one, one_mul, inv_one, mul_one, LinearMap.mem_range,
      exists_apply_eq_apply, forall_const]
  ¬∑ intro y z hy hz b
    simp only [Units.val_mul, map_mul, mul_inv_rev, LinearMap.mem_range]
    let ‚ü®z', hz'‚ü© := hz b
    let ‚ü®y', hy'‚ü© := hy z'
    suffices ‚àÉ c : M, (Œπ Q) c = involute ‚Üëy * (involute ‚Üëz * (Œπ Q) b * ‚Üëz‚Åª¬π) * ‚Üëy‚Åª¬π by
      obtain ‚ü®p, hp‚ü© := this
      refine' ‚ü®p, by simp only [hp, mul_assoc]‚ü©
    rw [‚Üê hz']
    use y'
    done
#align mem_lipschitz_involute_le mem_lipschitz_involute_le

theorem coe_mem_lipschitz_iff_mem {x : (CliffordAlgebra Q)À£} :
    ‚Üëx ‚àà (lipschitz Q).toSubmonoid.map (Units.coeHom <| CliffordAlgebra Q) ‚Üî x ‚àà lipschitz Q :=
  by
  simp only [Submonoid.mem_map, Subgroup.mem_toSubmonoid, Units.coeHom_apply, exists_prop]
  norm_cast
  exact exists_eq_right
#align coe_mem_lipschitz_iff_mem coe_mem_lipschitz_iff_mem

-- instance : Membership (CliffordAlgebra Q) (lipschitz Q) :=

/-- `pinGroup Q` is defined as the infimum of `lipschitz Q` and `unitary (CliffordAlgebra Q)`.
See `mem_iff`. -/
def pinGroup (Q : QuadraticForm R M) : Submonoid (CliffordAlgebra Q) :=
  (lipschitz Q).toSubmonoid.map (Units.coeHom <| CliffordAlgebra Q) ‚äì unitary _
#align pin_group pinGroup

namespace pinGroup

/-- An element is in `pinGroup Q` if and only if it is in `lipschitz Q` and `unitary`. -/
theorem mem_iff {x : CliffordAlgebra Q} :
    x ‚àà pinGroup Q ‚Üî
      x ‚àà (lipschitz Q).toSubmonoid.map (Units.coeHom <| CliffordAlgebra Q) ‚àß
        x ‚àà unitary (CliffordAlgebra Q) :=
  Iff.rfl
#align pin_group.mem_iff pinGroup.mem_iff

theorem mem_lipschitz {x : CliffordAlgebra Q} (hx : x ‚àà pinGroup Q) :
    x ‚àà (lipschitz Q).toSubmonoid.map (Units.coeHom <| CliffordAlgebra Q) :=
  hx.1
#align pin_group.mem_lipschitz pinGroup.mem_lipschitz

theorem mem_unitary {x : CliffordAlgebra Q} (hx : x ‚àà pinGroup Q) :
    x ‚àà unitary (CliffordAlgebra Q) :=
  hx.2
#align pin_group.mem_unitary pinGroup.mem_unitary

theorem units_mem_iff {x : (CliffordAlgebra Q)À£} :
    ‚Üëx ‚àà pinGroup Q ‚Üî x ‚àà lipschitz Q ‚àß ‚Üëx ‚àà unitary (CliffordAlgebra Q) := by
  rw [mem_iff, coe_mem_lipschitz_iff_mem]
#align pin_group.units_mem_iff pinGroup.units_mem_iff

theorem units_mem_lipschitz {x : (CliffordAlgebra Q)À£} (hx : ‚Üëx ‚àà pinGroup Q) : x ‚àà lipschitz Q :=
  (units_mem_iff.1 hx).1
#align pin_group.units_mem_lipschitz pinGroup.units_mem_lipschitz

/-- If x is in `pinGroup Q`, then `(Œπ Q).range` is closed under twisted conjugation. The reverse
statement presumably being true only in finite dimensions.-/
theorem units_mem_conjAct_le {x : (CliffordAlgebra Q)À£} (hx : ‚Üëx ‚àà pinGroup Q)
    [Invertible (2 : R)] : ConjAct.toConjAct x ‚Ä¢ LinearMap.range (Œπ Q) ‚â§ LinearMap.range (Œπ Q) :=
  mem_lipschitz_conjAct_le (units_mem_lipschitz hx)
#align pin_group.units_mem_conj_act_le pinGroup.units_mem_conjAct_le

/-- This is another version of `units_mem_conj_act_le` which uses `involute`. -/
theorem units_mem_involute_act_le {x : (CliffordAlgebra Q)À£} (hx : ‚Üëx ‚àà pinGroup Q)
    [Invertible (2 : R)] (y : M) : involute ‚Üëx * Œπ Q y * ‚Üëx‚Åª¬π ‚àà LinearMap.range (Œπ Q) :=
  mem_lipschitz_involute_le (units_mem_lipschitz hx) y
#align pin_group.units_mem_involute_act_le pinGroup.units_mem_involute_act_le

@[simp]
theorem star_hMul_self_of_mem {x : CliffordAlgebra Q} (hx : x ‚àà pinGroup Q) : star x * x = 1 :=
  hx.2.1
#align pin_group.star_mul_self_of_mem pinGroup.star_hMul_self_of_mem

@[simp]
theorem hMul_star_self_of_mem {x : CliffordAlgebra Q} (hx : x ‚àà pinGroup Q) : x * star x = 1 :=
  hx.2.2
#align pin_group.mul_star_self_of_mem pinGroup.hMul_star_self_of_mem

/-- See `star_mem_iff` for both directions. -/
theorem star_mem {x : CliffordAlgebra Q} (hx : x ‚àà pinGroup Q) : star x ‚àà pinGroup Q :=
  by
  rw [mem_iff] at hx ‚ä¢
  refine' ‚ü®_, unitary.star_mem hx.2‚ü©
  rcases hx with ‚ü®‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü©, hx‚ÇÇ, hx‚ÇÉ‚ü©
  simp only [Subgroup.coe_toSubmonoid, SetLike.mem_coe] at hy‚ÇÅ
  simp only [Units.coeHom_apply] at hy‚ÇÇ
  simp only [Submonoid.mem_map, Subgroup.mem_toSubmonoid, Units.coeHom_apply, exists_prop]
  refine' ‚ü®star y, _, by simp only [hy‚ÇÇ, Units.coe_star]‚ü©
  rw [‚Üê hy‚ÇÇ] at hx‚ÇÉ
  have hy‚ÇÉ : y * star y = 1 := by
    rw [‚Üê Units.eq_iff]
    simp only [hx‚ÇÉ, Units.val_mul, Units.coe_star, Units.val_one]
  apply_fun fun x => y‚Åª¬π * x at hy‚ÇÉ
  simp only [inv_mul_cancel_left, mul_one] at hy‚ÇÉ
  simp only [hy‚ÇÉ, hy‚ÇÅ, inv_mem_iff]
#align pin_group.star_mem pinGroup.star_mem

/-- An element is in `pinGroup Q` if and only if `star x` is in `pinGroup Q`.
See `star_mem` for only one direction. -/
@[simp]
theorem star_mem_iff {x : CliffordAlgebra Q} : star x ‚àà pinGroup Q ‚Üî x ‚àà pinGroup Q :=
  by
  refine' ‚ü®_, star_mem‚ü©
  intro hx
  convert star_mem hx
  exact (star_star x).symm
#align pin_group.star_mem_iff pinGroup.star_mem_iff

instance : Star (pinGroup Q) :=
  ‚ü®fun x => ‚ü®star x, star_mem x.prop‚ü©‚ü©

@[simp, norm_cast]
theorem coe_star {x : pinGroup Q} : ‚Üë(star x) = (star x : CliffordAlgebra Q) :=
  rfl
#align pin_group.coe_star pinGroup.coe_star

theorem coe_star_hMul_self (x : pinGroup Q) : (star x : CliffordAlgebra Q) * x = 1 :=
  star_hMul_self_of_mem x.prop
#align pin_group.coe_star_mul_self pinGroup.coe_star_hMul_self

theorem coe_hMul_star_self (x : pinGroup Q) : (x : CliffordAlgebra Q) * star x = 1 :=
  hMul_star_self_of_mem x.prop
#align pin_group.coe_mul_star_self pinGroup.coe_hMul_star_self

@[simp]
theorem star_hMul_self (x : pinGroup Q) : star x * x = 1 :=
  Subtype.ext <| coe_star_hMul_self x
#align pin_group.star_mul_self pinGroup.star_hMul_self

@[simp]
theorem hMul_star_self (x : pinGroup Q) : x * star x = 1 :=
  Subtype.ext <| coe_hMul_star_self x
#align pin_group.mul_star_self pinGroup.hMul_star_self

/-- `pinGroup Q` forms a group where the inverse is `star`. -/
instance : Group (pinGroup Q) :=
  { Submonoid.toMonoid _ with
    inv := star
    mul_left_inv := star_hMul_self }

-- set_option trace.Meta.synthInstance true in
set_option synthInstance.maxHeartbeats 25000 in
instance : InvolutiveStar (pinGroup Q) :=
  ‚ü®fun _ => by
    ext; simp only [coe_star, star_star]
  ‚ü©

instance : StarMul (pinGroup Q) :=
  ‚ü®fun _ _ => by ext; simp only [coe_star, Submonoid.coe_mul, star_mul]‚ü©

instance : Inhabited (pinGroup Q) :=
  ‚ü®1‚ü©

theorem star_eq_inv (x : pinGroup Q) : star x = x‚Åª¬π :=
  rfl
#align pin_group.star_eq_inv pinGroup.star_eq_inv

theorem star_eq_inv' : (star : pinGroup Q ‚Üí pinGroup Q) = Inv.inv :=
  rfl
#align pin_group.star_eq_inv' pinGroup.star_eq_inv'

/-- The elements in `pinGroup Q` embed into (CliffordAlgebra Q)À£. -/
@[simps]
def toUnits : pinGroup Q ‚Üí* (CliffordAlgebra Q)À£
    where
  toFun x := ‚ü®x, ‚Üëx‚Åª¬π, coe_hMul_star_self x, coe_star_hMul_self x‚ü©
  map_one' := Units.ext rfl
  map_mul' x y := Units.ext rfl
#align pin_group.to_units pinGroup.toUnits

theorem toUnits_injective : Function.Injective (toUnits : pinGroup Q ‚Üí (CliffordAlgebra Q)À£) :=
  fun x y h => Subtype.ext <| Units.ext_iff.mp h
#align pin_group.to_units_injective pinGroup.toUnits_injective

end pinGroup

end Pin

section Spin

open CliffordAlgebra MulAction

open scoped Pointwise

/-- `spinGroup Q` is defined as the infimum of `pinGroup Q` and `CliffordAlgebra.even Q`.
See `mem_iff`. -/
def spinGroup (Q : QuadraticForm R M) :=
  pinGroup Q ‚äì (CliffordAlgebra.even Q).toSubring.toSubmonoid
#align spin_group spinGroup

namespace spinGroup

/-- An element is in `spinGroup Q` if and only if it is in `pinGroup Q` and `even Q`. -/
theorem mem_iff {x : CliffordAlgebra Q} : x ‚àà spinGroup Q ‚Üî x ‚àà pinGroup Q ‚àß x ‚àà even Q :=
  Iff.rfl
#align spin_group.mem_iff spinGroup.mem_iff

theorem mem_pin {x : CliffordAlgebra Q} (hx : x ‚àà spinGroup Q) : x ‚àà pinGroup Q :=
  hx.1
#align spin_group.mem_pin spinGroup.mem_pin

theorem mem_even {x : CliffordAlgebra Q} (hx : x ‚àà spinGroup Q) : x ‚àà even Q :=
  hx.2
#align spin_group.mem_even spinGroup.mem_even

theorem units_mem_lipschitz {x : (CliffordAlgebra Q)À£} (hx : ‚Üëx ‚àà spinGroup Q) : x ‚àà lipschitz Q :=
  pinGroup.units_mem_lipschitz (mem_pin hx)
#align spin_group.units_mem_lipschitz spinGroup.units_mem_lipschitz

/-- If x is in `spinGroup Q`, then `involute x` is equal to x.-/
theorem mem_involute_eq {x : CliffordAlgebra Q} (hx : x ‚àà spinGroup Q) : involute x = x :=
  involute_eq_of_mem_even (mem_even hx)
#align spin_group.mem_involute_eq spinGroup.mem_involute_eq

theorem units_involute_act_eq_conjAct {x : (CliffordAlgebra Q)À£} (hx : ‚Üëx ‚àà spinGroup Q)
    [Invertible (2 : R)] (y : M) : involute ‚Üëx * Œπ Q y * ‚Üëx‚Åª¬π = ConjAct.toConjAct x ‚Ä¢ (Œπ Q y) := by
      rw [mem_involute_eq hx, @ConjAct.units_smul_def, @ConjAct.ofConjAct_toConjAct]
#align spin_group.units_involute_act_eq_conj_act spinGroup.units_involute_act_eq_conjAct

/- If x is in `spinGroup Q`, then `(Œπ Q).range` is closed under twisted conjugation. The reverse
statement presumably being true only in finite dimensions.-/
theorem units_mem_conjAct_le {x : (CliffordAlgebra Q)À£} (hx : ‚Üëx ‚àà spinGroup Q)
    [Invertible (2 : R)] : ConjAct.toConjAct x ‚Ä¢ LinearMap.range (Œπ Q) ‚â§ LinearMap.range (Œπ Q) :=
  mem_lipschitz_conjAct_le (units_mem_lipschitz hx)
#align spin_group.units_mem_conj_act_le spinGroup.units_mem_conjAct_le

/- This is another version of `units_mem_conj_act_le` which uses `involute`.-/
theorem units_mem_involute_act_le {x : (CliffordAlgebra Q)À£} (hx : ‚Üëx ‚àà spinGroup Q)
    [Invertible (2 : R)] (y : M) : involute ‚Üëx * Œπ Q y * ‚Üëx‚Åª¬π ‚àà LinearMap.range (Œπ Q) :=
  mem_lipschitz_involute_le (units_mem_lipschitz hx) y
#align spin_group.units_mem_involute_act_le spinGroup.units_mem_involute_act_le

@[simp]
theorem star_hMul_self_of_mem {x : CliffordAlgebra Q} (hx : x ‚àà spinGroup Q) : star x * x = 1 :=
  hx.1.2.1
#align spin_group.star_mul_self_of_mem spinGroup.star_hMul_self_of_mem

@[simp]
theorem hMul_star_self_of_mem {x : CliffordAlgebra Q} (hx : x ‚àà spinGroup Q) : x * star x = 1 :=
  hx.1.2.2
#align spin_group.mul_star_self_of_mem spinGroup.hMul_star_self_of_mem

/-- See `star_mem_iff` for both directions. -/
theorem star_mem {x : CliffordAlgebra Q} (hx : x ‚àà spinGroup Q) : star x ‚àà spinGroup Q :=
  by
  rw [mem_iff] at hx ‚ä¢
  cases' hx with hx‚ÇÅ hx‚ÇÇ
  refine' ‚ü®pinGroup.star_mem hx‚ÇÅ, _‚ü©
  dsimp only [CliffordAlgebra.even] at hx‚ÇÇ ‚ä¢
  simp only [Submodule.mem_toSubalgebra] at hx‚ÇÇ ‚ä¢
  simp only [star_def, reverse_mem_evenOdd_iff, involute_mem_evenOdd_iff, hx‚ÇÇ]
#align spin_group.star_mem spinGroup.star_mem

/-- An element is in `spinGroup Q` if and only if `star x` is in `spinGroup Q`.
See `star_mem` for only one direction.
-/
@[simp]
theorem star_mem_iff {x : CliffordAlgebra Q} : star x ‚àà spinGroup Q ‚Üî x ‚àà spinGroup Q :=
  by
  refine' ‚ü®_, star_mem‚ü©
  intro hx
  convert star_mem hx
  exact (star_star x).symm
#align spin_group.star_mem_iff spinGroup.star_mem_iff

instance : Star (spinGroup Q) :=
  ‚ü®fun x => ‚ü®star x, star_mem x.prop‚ü©‚ü©

@[simp, norm_cast]
theorem coe_star {x : spinGroup Q} : ‚Üë(star x) = (star x : CliffordAlgebra Q) :=
  rfl
#align spin_group.coe_star spinGroup.coe_star

theorem coe_star_hMul_self (x : spinGroup Q) : (star x : CliffordAlgebra Q) * x = 1 :=
  star_hMul_self_of_mem x.prop
#align spin_group.coe_star_mul_self spinGroup.coe_star_hMul_self

theorem coe_hMul_star_self (x : spinGroup Q) : (x : CliffordAlgebra Q) * star x = 1 :=
  hMul_star_self_of_mem x.prop
#align spin_group.coe_mul_star_self spinGroup.coe_hMul_star_self

@[simp]
theorem star_hMul_self (x : spinGroup Q) : star x * x = 1 :=
  Subtype.ext <| coe_star_hMul_self x
#align spin_group.star_mul_self spinGroup.star_hMul_self

@[simp]
theorem hMul_star_self (x : spinGroup Q) : x * star x = 1 :=
  Subtype.ext <| coe_hMul_star_self x
#align spin_group.mul_star_self spinGroup.hMul_star_self

/-- `spinGroup Q` forms a group where the inverse is `star`. -/
instance : Group (spinGroup Q) :=
  { Submonoid.toMonoid _ with
    inv := star
    mul_left_inv := star_hMul_self }

set_option synthInstance.maxHeartbeats 25000 in
instance : InvolutiveStar (spinGroup Q) :=
  ‚ü®fun _ => by ext; simp only [coe_star, star_star]‚ü©

instance : StarMul (spinGroup Q) :=
  ‚ü®fun _ _ => by ext; simp only [coe_star, Submonoid.coe_mul, star_mul]‚ü©

instance : Inhabited (spinGroup Q) :=
  ‚ü®1‚ü©

theorem star_eq_inv (x : spinGroup Q) : star x = x‚Åª¬π :=
  rfl
#align spin_group.star_eq_inv spinGroup.star_eq_inv

theorem star_eq_inv' : (star : spinGroup Q ‚Üí spinGroup Q) = Inv.inv :=
  rfl
#align spin_group.star_eq_inv' spinGroup.star_eq_inv'

/-- The elements in `spinGroup Q` embed into (CliffordAlgebra Q)À£. -/
@[simps]
def toUnits : spinGroup Q ‚Üí* (CliffordAlgebra Q)À£
    where
  toFun x := ‚ü®x, ‚Üëx‚Åª¬π, coe_hMul_star_self x, coe_star_hMul_self x‚ü©
  map_one' := Units.ext rfl
  map_mul' x y := Units.ext rfl
#align spin_group.to_units spinGroup.toUnits

theorem toUnits_injective : Function.Injective (toUnits : spinGroup Q ‚Üí (CliffordAlgebra Q)À£) :=
  fun x y h => Subtype.ext <| Units.ext_iff.mp h
#align spin_group.to_units_injective spinGroup.toUnits_injective

end spinGroup

end Spin
